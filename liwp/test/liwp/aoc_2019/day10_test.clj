(ns liwp.aoc-2019.day10-test
  (:require [liwp.aoc-2019.day10 :as sut]
            [clojure.test :as t]))

(t/deftest test-parse-map
  (t/is (= [[1 0] [4 0]
            [0 2] [1 2] [2 2] [3 2] [4 2]
            [4 3]
            [3 4] [4 4]] (sut/parse-map ".#..#\n.....\n#####\n....#\n...##"))))

(t/deftest test-demo-1
  (let [demo (sut/parse-map ".#..#\n.....\n#####\n....#\n...##")]
    (t/is (= [[3 4] 8] (sut/run-on-map demo)))))

(t/deftest test-demo-2
  (let [demo (sut/parse-map "......#.#.\n#..#.#....\n..#######.\n.#.#.###..\n.#..#.....\n..#....#.#\n#..#....#.\n.##.#..###\n##...#..#.\n.#....####")]
    (t/is (= [[5 8] 33] (sut/run-on-map demo)))))

(t/deftest test-demo-3
  (let [demo (sut/parse-map "#.#...#.#.\n.###....#.\n.#....#...\n##.#.#.#.#\n....#.#.#.\n.##..###.#\n..#...##..\n..##....##\n......#...\n.####.###.")]
    (t/is (= [[1 2] 35] (sut/run-on-map demo)))))

(t/deftest test-demo-4
  (let [demo (sut/parse-map ".#..#..###\n####.###.#\n....###.#.\n..###.##.#\n##.##.#.#.\n....###..#\n..#.#..#.#\n#..#.#.###\n.##...##.#\n.....#.#..")]
    (t/is (= [[6 3] 41] (sut/run-on-map demo)))))

(t/deftest test-demo-5
  (let [demo (sut/parse-map ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##")]
    (t/is (= [[11 13] 210] (sut/run-on-map demo)))))

(t/deftest test-part-1
  (t/is (= [[20 21] 247] (sut/part-1))))

(t/deftest test-demo-6
  (let [demo (sut/parse-map ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##")
        laserings (map second (sut/laser-map [11 13] demo))]
    (t/is (= [11 12] (nth laserings 0)))
    (t/is (= [12 1] (nth laserings 1)))

    (t/is (= [12 2] (nth laserings 2)))
    (t/is (= [12 8] (nth laserings 9)))
    (t/is (= [16 0] (nth laserings 19)))
    (t/is (= [16 9] (nth laserings 49)))
    (t/is (= [10 16] (nth laserings 99)))
    (t/is (= [9 6] (nth laserings 198)))
    (t/is (= [8 2] (nth laserings 199)))
    (t/is (= [10 9] (nth laserings 200)))))

(t/deftest test-part-2
  (t/is (= 1919 (sut/part-2))))
